{"version":3,"sources":["containers/Auth/Auth.css","containers/Auth/Auth.js","components/UI/Input/Input.js","components/UI/Input/Input.css"],"names":["module","exports","Auth","state","authForm","email","elementType","elementConfig","type","placeholder","value","validation","required","isEmail","valid","touched","password","minLength","formIsValid","isSignUp","inputChangeHandler","evt","id","authFormClone","updateObj","target","validate","fields","field","push","includes","setState","handleFormSubmit","preventDefault","props","onFormSubmit","authModeChangeHandler","prevState","removeCharFromStr","str","char","replace","this","buildingBurger","authRedirectPath","onSetAuthRedirectPath","formEl","key","config","form","isAuthenticated","to","onSubmit","map","el","changeHandler","invalid","disabled","clickHandler","loading","errorMessage","error","errMsg","message","style","color","className","classes","Component","connect","auth","token","burgerBuilder","building","dispatch","isSignup","actions","path","Input","inputElement","inputClass","InputElement","Invalid","join","onChange","options","opt","displayValue","Label","label"],"mappings":"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","file":"static/js/4.0707d5cf.chunk.js","sourcesContent":["// extracted by mini-css-extract-plugin\nmodule.exports = {\"Auth\":\"_2N4mhcnGbW7JC6z-s6bKrq\"};","import React, { Component, Fragment } from \"react\";\r\nimport { connect } from \"react-redux\";\r\nimport * as actions from \"../../store/actions/index\";\r\nimport Button from \"../../components/UI/Button/Button\";\r\nimport Input from \"../../components/UI/Input/Input\";\r\nimport classes from \"./Auth.css\";\r\nimport Spinner from \"../../components/UI/Spinner/Spinner\";\r\nimport { Redirect } from \"react-router\";\r\nimport { updateObj, validate } from \"../../shared/utils\";\r\n\r\nclass Auth extends Component {\r\n  state = {\r\n    authForm: {\r\n      email: {\r\n        elementType: \"input\",\r\n        elementConfig: {\r\n          type: \"email\",\r\n          placeholder: \"Your mail\",\r\n        },\r\n        value: \"\",\r\n        validation: {\r\n          required: true,\r\n          isEmail: true,\r\n        },\r\n        valid: false,\r\n        touched: false,\r\n      },\r\n      password: {\r\n        elementType: \"input\",\r\n        elementConfig: {\r\n          type: \"password\",\r\n          placeholder: \"Password\",\r\n        },\r\n        value: \"\",\r\n        validation: {\r\n          required: true,\r\n          minLength: 6,\r\n        },\r\n        valid: false,\r\n        touched: false,\r\n      },\r\n    },\r\n    formIsValid: false,\r\n    isSignUp: true,\r\n  };\r\n\r\n  componentDidMount() {\r\n    if (!this.props.buildingBurger && this.props.authRedirectPath !== \"/\")\r\n      this.props.onSetAuthRedirectPath(\"/\");\r\n  }\r\n\r\n  inputChangeHandler = (evt, id) => {\r\n    let authFormClone = { ...this.state.authForm };\r\n\r\n    authFormClone[id] = updateObj(authFormClone[id], {\r\n      value: evt.target.value,\r\n      touched: true,\r\n      valid: validate(evt.target.value, authFormClone[id].validation),\r\n    });\r\n    const fields = [];\r\n    for (let field in authFormClone) {\r\n      fields.push(authFormClone[field].valid);\r\n    }\r\n\r\n    if (!fields.includes(false)) {\r\n      this.setState({ formIsValid: true });\r\n    }\r\n    this.setState({ authForm: authFormClone });\r\n  };\r\n\r\n  handleFormSubmit = (evt) => {\r\n    evt.preventDefault();\r\n    this.props.onFormSubmit(\r\n      this.state.authForm.email.value,\r\n      this.state.authForm.password.value,\r\n      this.state.isSignUp\r\n    );\r\n  };\r\n\r\n  authModeChangeHandler = () => {\r\n    this.setState((prevState) => {\r\n      return { isSignUp: !prevState.isSignUp };\r\n    });\r\n  };\r\n\r\n  removeCharFromStr = (str, char) => {\r\n    while (str.includes(char)) {\r\n      str = str.replace(char, \" \");\r\n    }\r\n    return str;\r\n  };\r\n\r\n  render() {\r\n    const formEl = [];\r\n    for (let key in this.state.authForm) {\r\n      formEl.push({\r\n        id: key,\r\n        config: this.state.authForm[key],\r\n      });\r\n    }\r\n    let form = (\r\n      <Fragment>\r\n        {this.props.isAuthenticated ? (\r\n          <Redirect to={this.props.authRedirectPath} />\r\n        ) : null}\r\n        <form onSubmit={this.handleFormSubmit}>\r\n          {formEl.map((el) => (\r\n            <Input\r\n              key={el.id}\r\n              elementType={el.config.elementType}\r\n              elementConfig={el.config.elementConfig}\r\n              value={el.config.value}\r\n              changeHandler={(evt) => this.inputChangeHandler(evt, el.id)}\r\n              invalid={!el.config.valid}\r\n              touched={el.config.touched}\r\n            />\r\n          ))}\r\n\r\n          {this.state.isSignUp ? (\r\n            <Button type=\"Success\" disabled={!this.state.formIsValid}>\r\n              Sign Up\r\n            </Button>\r\n          ) : (\r\n            <Button type=\"Success\" disabled={!this.state.formIsValid}>\r\n              Log In\r\n            </Button>\r\n          )}\r\n        </form>\r\n        <Button type=\"Danger\" clickHandler={this.authModeChangeHandler}>\r\n          Switch to {this.state.isSignUp ? \"Login\" : \"Sign Up\"}\r\n        </Button>\r\n      </Fragment>\r\n    );\r\n\r\n    if (this.props.loading) {\r\n      form = <Spinner />;\r\n    }\r\n    let errorMessage = null;\r\n    if (this.props.error) {\r\n      const errMsg = this.removeCharFromStr(this.props.error.message, \"_\");\r\n      errorMessage = <p style={{ color: \"red\" }}>{errMsg}</p>;\r\n    }\r\n    return (\r\n      <div className={classes.Auth}>\r\n        {errorMessage}\r\n        {form}\r\n      </div>\r\n    );\r\n  }\r\n}\r\n\r\nconst mapStateToProps = (state) => {\r\n  return {\r\n    loading: state.auth.loading,\r\n    error: state.auth.error,\r\n    isAuthenticated: state.auth.token != null,\r\n    authRedirectPath: state.auth.authRedirectPath,\r\n    buildingBurger: state.burgerBuilder.building,\r\n  };\r\n};\r\nconst mapDispatchToProps = (dispatch) => {\r\n  return {\r\n    onFormSubmit: (email, password, isSignup) =>\r\n      dispatch(actions.auth(email, password, isSignup)),\r\n    onSetAuthRedirectPath: (path) =>\r\n      dispatch(actions.setAuthRedirectPath(path)),\r\n  };\r\n};\r\nexport default connect(mapStateToProps, mapDispatchToProps)(Auth);\r\n","import React from \"react\";\r\nimport classes from \"./Input.css\";\r\n\r\nconst Input = (props) => {\r\n  let inputElement = null;\r\n  let inputClass = [classes.InputElement];\r\n  if (props.invalid && props.touched) {\r\n    inputClass.push(classes.Invalid);\r\n  }\r\n  switch (props.elementType) {\r\n    case \"input\":\r\n      inputElement = (\r\n        <input\r\n          {...props.elementConfig}\r\n          value={props.value}\r\n          className={inputClass.join(\" \")}\r\n          onChange={props.changeHandler}\r\n        />\r\n      );\r\n      break;\r\n    case \"textarea\":\r\n      inputElement = (\r\n        <textarea\r\n          {...props.elementConfig}\r\n          value={props.value}\r\n          className={inputClass.join(\" \")}\r\n          onChange={props.changeHandler}\r\n        />\r\n      );\r\n      break;\r\n    case \"select\":\r\n      inputElement = (\r\n        <select\r\n          className={inputClass.join(\" \")}\r\n          onChange={props.changeHandler}\r\n          value={props.value}\r\n        >\r\n          {props.elementConfig.options.map((opt) => (\r\n            <option key={opt.value} value={opt.value}>\r\n              {opt.displayValue}\r\n            </option>\r\n          ))}\r\n        </select>\r\n      );\r\n      break;\r\n    default:\r\n      inputElement = (\r\n        <input\r\n          {...props.elementConfig}\r\n          value={props.value}\r\n          className={inputClass.join(\" \")}\r\n          onChange={props.changeHandler}\r\n        />\r\n      );\r\n  }\r\n  return (\r\n    <div className={classes.Input}>\r\n      <label className={classes.Label}>{props.label}</label>\r\n      {inputElement}\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default Input;\r\n","// extracted by mini-css-extract-plugin\nmodule.exports = {\"Input\":\"_2JD9xfJ5iopsdJv4stofmd\",\"Label\":\"_1BS4VDEyRn6gTvXKGhCGtY\",\"InputElement\":\"_2h6u9szBkMg06ulHHM-dBj\",\"Invalid\":\"_3PMZLK250RqXAYcKDUm6_p\"};"],"sourceRoot":""}