{"version":3,"sources":["components/Order/Order.js","containers/Orders/Orders.js","components/Order/Order.css"],"names":["Order","props","ingredients","Object","keys","map","ing","key","style","margin","display","textTransform","border","padding","className","classes","isDelivered","status","price","color","textAlign","Orders","componentDidMount","a","onFetchOrder","token","userId","orders","this","length","order","id","toFixed","delivered","loading","Spinner","error","Component","connect","state","auth","dispatch","actions","withErrorHandler","axios","module","exports"],"mappings":"oPAyDeA,EAtDD,SAACC,GACb,IAAIC,EAAcD,EAAMC,YACtBC,OAAOC,KAAKH,EAAMC,aAAaG,KAAI,SAACC,EAAKC,GAAN,OACjC,0BACEC,MAAO,CACLC,OAAQ,QACRC,QAAS,eACTC,cAAe,aACfC,OAAQ,iBACRC,QAAS,OAEXN,IAAKA,GAEJD,EAVH,KAUUL,EAAMC,YAAYI,GAV5B,QAcF,0BACEE,MAAO,CACLC,OAAQ,QACRC,QAAS,eACTC,cAAe,aACfC,OAAQ,iBACRC,QAAS,QANb,cAYF,OACE,yBAAKC,UAAWC,IAAQf,OACtB,2CAAiBE,GACjB,gDAEE,gCAASD,EAAMe,YAAc,YAAcf,EAAMgB,SAEnD,uDACmC,uCAAahB,EAAMiB,QAErDjB,EAAMe,YACL,uBAAGR,MAAO,CAAEW,MAAO,QAASC,UAAW,WACpC,IACD,4DAGF,uBAAGZ,MAAO,CAAEW,MAAO,MAAOC,UAAW,WAClC,IACD,qE,gBCzCJC,E,4MACJC,kB,sBAAoB,sBAAAC,EAAA,sDAClB,EAAKtB,MAAMuB,aAAa,EAAKvB,MAAMwB,MAAO,EAAKxB,MAAMyB,QADnC,2C,uDAIlB,IAAIC,EAC2B,IAA7BC,KAAK3B,MAAM0B,OAAOE,QAClBD,KAAK3B,MAAM0B,OAAOtB,KAAI,SAACyB,GACrB,OACE,kBAAC,EAAD,CACEvB,IAAKuB,EAAMC,GACX7B,YAAa4B,EAAM5B,YACnBgB,QAASY,EAAMZ,OAAOc,QAAQ,GAC9Bf,OAAQa,EAAMb,OACdD,YAAac,EAAMG,eAU3B,OANIL,KAAK3B,MAAMiC,UACbP,EAAS,kBAACQ,EAAA,EAAD,OAEPP,KAAK3B,MAAMmC,QACbT,EAAS,sDAGT,6BACGA,GAGC,wBAAInB,MAAO,CAAEW,MAAO,OAAQC,UAAW,WAAvC,yD,GA7BWiB,aAsDNC,uBAhBS,SAACC,GACvB,MAAO,CACLZ,OAAQY,EAAMT,MAAMH,OACpBO,QAASK,EAAMT,MAAMI,QACrBE,MAAOG,EAAMT,MAAMM,MACnBX,MAAOc,EAAMC,KAAKf,MAClBC,OAAQa,EAAMC,KAAKd,WAII,SAACe,GAC1B,MAAO,CACLjB,aAAc,SAACC,EAAOC,GAAR,OACZe,EAASC,IAAoBjB,EAAOC,QAG3BY,CAGbK,YAAiBtB,EAAQuB,O,mBCjE3BC,EAAOC,QAAU,CAAC,MAAQ","file":"static/js/6.1bed7174.chunk.js","sourcesContent":["import React from \"react\";\r\nimport classes from \"./Order.css\";\r\n\r\nconst Order = (props) => {\r\n  let ingredients = props.ingredients ? (\r\n    Object.keys(props.ingredients).map((ing, key) => (\r\n      <span\r\n        style={{\r\n          margin: \"0 8px\",\r\n          display: \"inline-block\",\r\n          textTransform: \"capitalize\",\r\n          border: \"1px solid #eee\",\r\n          padding: \"5px\",\r\n        }}\r\n        key={key}\r\n      >\r\n        {ing} ({props.ingredients[ing]})\r\n      </span>\r\n    ))\r\n  ) : (\r\n    <span\r\n      style={{\r\n        margin: \"0 8px\",\r\n        display: \"inline-block\",\r\n        textTransform: \"capitalize\",\r\n        border: \"1px solid #eee\",\r\n        padding: \"5px\",\r\n      }}\r\n    >\r\n      Only Bread\r\n    </span>\r\n  );\r\n  return (\r\n    <div className={classes.Order}>\r\n      <p>Ingredients: {ingredients}</p>\r\n      <p>\r\n        Status : &nbsp; &nbsp;\r\n        <strong>{props.isDelivered ? \"Delivered\" : props.status}</strong>\r\n      </p>\r\n      <p>\r\n        Price : &nbsp; &nbsp;&nbsp;&nbsp;<strong>USD {props.price}</strong>\r\n      </p>\r\n      {props.isDelivered ? (\r\n        <p style={{ color: \"green\", textAlign: \"center\" }}>\r\n          {\" \"}\r\n          <strong>The Order Was Delivered</strong>\r\n        </p>\r\n      ) : (\r\n        <p style={{ color: \"red\", textAlign: \"center\" }}>\r\n          {\" \"}\r\n          <strong>The Order is not Delivered yet</strong>\r\n        </p>\r\n      )}\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default Order;\r\n","import React, { Component } from \"react\";\r\nimport axios from \"../../axios-orders\";\r\nimport { connect } from \"react-redux\";\r\n\r\nimport * as actions from \"../../store/actions/index\";\r\nimport Order from \"../../components/Order/Order\";\r\nimport Spinner from \"../../components/UI/Spinner/Spinner\";\r\nimport withErrorHandler from \"../../hoc/withErrorHandler/withErrorHandler\";\r\n\r\nclass Orders extends Component {\r\n  componentDidMount = async () => {\r\n    this.props.onFetchOrder(this.props.token, this.props.userId);\r\n  };\r\n  render() {\r\n    let orders =\r\n      this.props.orders.length !== 0 &&\r\n      this.props.orders.map((order) => {\r\n        return (\r\n          <Order\r\n            key={order.id}\r\n            ingredients={order.ingredients}\r\n            price={(+order.price).toFixed(2)}\r\n            status={order.status}\r\n            isDelivered={order.delivered}\r\n          />\r\n        );\r\n      });\r\n    if (this.props.loading) {\r\n      orders = <Spinner />;\r\n    }\r\n    if (this.props.error) {\r\n      orders = <p>Can't Load your orders</p>;\r\n    }\r\n    return (\r\n      <div>\r\n        {orders ? (\r\n          orders\r\n        ) : (\r\n          <h1 style={{ color: \"#eee\", textAlign: \"center\" }}>\r\n            No orders made yet... Start By ordering a burger\r\n          </h1>\r\n        )}\r\n      </div>\r\n    );\r\n  }\r\n}\r\n\r\nconst mapStateToProps = (state) => {\r\n  return {\r\n    orders: state.order.orders,\r\n    loading: state.order.loading,\r\n    error: state.order.error,\r\n    token: state.auth.token,\r\n    userId: state.auth.userId,\r\n  };\r\n};\r\n\r\nconst mapDispatchToProps = (dispatch) => {\r\n  return {\r\n    onFetchOrder: (token, userId) =>\r\n      dispatch(actions.fetchOrders(token, userId)),\r\n  };\r\n};\r\nexport default connect(\r\n  mapStateToProps,\r\n  mapDispatchToProps\r\n)(withErrorHandler(Orders, axios));\r\n","// extracted by mini-css-extract-plugin\nmodule.exports = {\"Order\":\"_2n5n7ltrIf4uIwFQyPu5qS\"};"],"sourceRoot":""}