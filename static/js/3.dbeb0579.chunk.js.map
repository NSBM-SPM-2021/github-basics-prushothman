{"version":3,"sources":["components/Order/CheckoutSummmary/CheckoutSummary.js","containers/Checkout/ContactData/ContactData.js","containers/Checkout/Checkout.js","components/UI/Input/Input.js","components/UI/Input/Input.css","components/Order/CheckoutSummmary/CheckoutSummary.css","containers/Checkout/ContactData/ContactData.css"],"names":["CheckoutSummary","props","className","classes","style","width","margin","Burger","ingredients","Button","type","clickHandler","onContinue","onCancel","ContactData","state","orderForm","name","elementType","elementConfig","placeholder","value","validation","required","minLength","maxLength","valid","touched","street","zipCode","isNumeric","country","email","isEmail","deliveryMethod","options","displayValue","formIsValid","inputChangeHandler","evt","id","orderFormClone","updateObj","target","validate","fields","field","push","includes","setState","orderHandler","preventDefault","contactData","input","order","ings","price","orderData","userId","status","delivered","onOrderBurger","token","formEl","key","this","config","form","onSubmit","map","el","Input","changeHandler","invalid","disabled","loading","Spinner","Component","connect","burgerBuilder","totalPrice","auth","dispatch","actions","withErrorHandler","axios","Checkout","cancelCheckout","history","goBack","continueCheckout","replace","summary","to","purchasedRedirect","purchased","path","match","component","withRouter","inputElement","inputClass","InputElement","Invalid","join","onChange","opt","Label","label","module","exports"],"mappings":"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","file":"static/js/3.dbeb0579.chunk.js","sourcesContent":["import React from \"react\";\r\nimport Burger from \"../../Burger/Burger\";\r\nimport Button from \"../../UI/Button/Button\";\r\n\r\nimport classes from \"./CheckoutSummary.css\";\r\n\r\nconst CheckoutSummary = (props) => {\r\n  return (\r\n    <div className={classes.CheckoutSummary}>\r\n      <h1>We hope it taste's well</h1>\r\n      <div style={{ width: \"100%\", margin: \"auto\" }}>\r\n        <Burger ingredients={props.ingredients} />\r\n      </div>\r\n      <Button type=\"Success\" clickHandler={props.onContinue}>\r\n        Continue\r\n      </Button>\r\n      <Button type=\"Danger\" clickHandler={props.onCancel}>\r\n        Cancel\r\n      </Button>\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default CheckoutSummary;\r\n","import React, { Component } from \"react\";\r\nimport axios from \"../../../axios-orders\";\r\nimport { connect } from \"react-redux\";\r\nimport * as actions from \"../../../store/actions/index\";\r\n\r\nimport withErrorHandler from \"../../../hoc/withErrorHandler/withErrorHandler\";\r\nimport Button from \"../../../components/UI/Button/Button\";\r\nimport Input from \"../../../components/UI/Input/Input\";\r\nimport Spinner from \"../../../components/UI/Spinner/Spinner\";\r\nimport classes from \"./ContactData.css\";\r\nimport { updateObj, validate } from \"../../../shared/utils\";\r\n\r\nclass ContactData extends Component {\r\n  state = {\r\n    orderForm: {\r\n      name: {\r\n        elementType: \"input\",\r\n        elementConfig: {\r\n          type: \"text\",\r\n          placeholder: \"Your name\",\r\n        },\r\n        value: \"\",\r\n        validation: {\r\n          required: true,\r\n          minLength: 4,\r\n          maxLength: 20,\r\n        },\r\n        valid: false,\r\n        touched: false,\r\n      },\r\n      street: {\r\n        elementType: \"input\",\r\n        elementConfig: {\r\n          type: \"text\",\r\n          placeholder: \"Street\",\r\n        },\r\n        value: \"\",\r\n        validation: {\r\n          required: true,\r\n        },\r\n        valid: false,\r\n        touched: false,\r\n      },\r\n      zipCode: {\r\n        elementType: \"input\",\r\n        elementConfig: {\r\n          type: \"number\",\r\n          placeholder: \"ZIP CODE\",\r\n        },\r\n        value: \"\",\r\n        validation: {\r\n          required: true,\r\n          minLength: 5,\r\n          maxLength: 5,\r\n          isNumeric: true,\r\n        },\r\n        valid: false,\r\n        touched: false,\r\n      },\r\n      country: {\r\n        elementType: \"input\",\r\n        elementConfig: {\r\n          type: \"text\",\r\n          placeholder: \"Country\",\r\n        },\r\n        value: \"\",\r\n        validation: {\r\n          required: true,\r\n          touched: false,\r\n        },\r\n      },\r\n      email: {\r\n        elementType: \"input\",\r\n        elementConfig: {\r\n          type: \"email\",\r\n          placeholder: \"Your mail\",\r\n        },\r\n        value: \"\",\r\n        validation: {\r\n          required: true,\r\n          isEmail: true,\r\n        },\r\n        valid: false,\r\n        touched: false,\r\n      },\r\n      deliveryMethod: {\r\n        elementType: \"select\",\r\n        elementConfig: {\r\n          options: [\r\n            { value: \"fastest\", displayValue: \"Fastest\" },\r\n            { value: \"cheapest\", displayValue: \"Cheapest\" },\r\n          ],\r\n        },\r\n        value: \"fastest\",\r\n        validation: {},\r\n        valid: true,\r\n      },\r\n    },\r\n    formIsValid: false,\r\n  };\r\n\r\n  inputChangeHandler = (evt, id) => {\r\n    let orderFormClone = { ...this.state.orderForm };\r\n    orderFormClone[id] = updateObj(orderFormClone[id], {\r\n      value: evt.target.value,\r\n      touched: true,\r\n      valid: validate(evt.target.value, orderFormClone[id].validation),\r\n    });\r\n    const fields = [];\r\n    for (let field in orderFormClone) {\r\n      fields.push(orderFormClone[field].valid);\r\n    }\r\n    if (!fields.includes(false)) {\r\n      this.setState({ formIsValid: true });\r\n    }\r\n\r\n    this.setState({ orderForm: orderFormClone });\r\n  };\r\n  orderHandler = (evt) => {\r\n    evt.preventDefault();\r\n    const contactData = {};\r\n    for (let input in this.state.orderForm) {\r\n      contactData[input] = this.state.orderForm[input];\r\n    }\r\n    const order = {\r\n      ingredients: this.props.ings,\r\n      price: this.props.price,\r\n      orderData: contactData,\r\n      userId: this.props.userId,\r\n      status: \"Preparing .....\",\r\n      delivered: false,\r\n    };\r\n    this.props.onOrderBurger(order, this.props.token);\r\n  };\r\n  render() {\r\n    const formEl = [];\r\n    for (let key in this.state.orderForm) {\r\n      formEl.push({\r\n        id: key,\r\n        config: this.state.orderForm[key],\r\n      });\r\n    }\r\n    let form = (\r\n      <form onSubmit={this.orderHandler}>\r\n        {formEl.map((el) => (\r\n          <Input\r\n            key={el.id}\r\n            elementType={el.config.elementType}\r\n            elementConfig={el.config.elementConfig}\r\n            value={el.config.value}\r\n            changeHandler={(evt) => this.inputChangeHandler(evt, el.id)}\r\n            invalid={!el.config.valid}\r\n            touched={el.config.touched}\r\n          />\r\n        ))}\r\n        <Button type=\"Success\" disabled={!this.state.formIsValid}>\r\n          Order\r\n        </Button>\r\n      </form>\r\n    );\r\n    if (this.props.loading) {\r\n      form = <Spinner />;\r\n    }\r\n    return (\r\n      <div className={classes.ContactData}>\r\n        <h4>Enter your contact data</h4>\r\n        {form}\r\n      </div>\r\n    );\r\n  }\r\n}\r\n\r\nconst mapStateToProps = (state) => {\r\n  return {\r\n    ings: state.burgerBuilder.ingredients,\r\n    price: state.burgerBuilder.totalPrice,\r\n    loading: state.order.loading,\r\n    token: state.auth.token,\r\n    userId: state.auth.userId,\r\n  };\r\n};\r\nconst mapDispatchToProps = (dispatch) => {\r\n  return {\r\n    onOrderBurger: (orderData, token) =>\r\n      dispatch(actions.purchaseBurger(orderData, token)),\r\n  };\r\n};\r\n\r\nexport default connect(\r\n  mapStateToProps,\r\n  mapDispatchToProps\r\n)(withErrorHandler(ContactData, axios));\r\n","import React, { Component } from \"react\";\r\nimport { withRouter } from \"react-router-dom\";\r\nimport { connect } from \"react-redux\";\r\nimport { Redirect, Route } from \"react-router-dom\";\r\nimport CheckoutSummary from \"../../components/Order/CheckoutSummmary/CheckoutSummary\";\r\nimport ContactData from \"./ContactData/ContactData\";\r\n\r\nclass Checkout extends Component {\r\n  cancelCheckout = () => {\r\n    this.props.history.goBack();\r\n  };\r\n  continueCheckout = () => {\r\n    this.props.history.replace(\"/checkout/fill-data\");\r\n  };\r\n  render() {\r\n    let summary = <Redirect to=\"/\" />;\r\n    if (this.props.ings) {\r\n      const purchasedRedirect = this.props.purchased ? (\r\n        <Redirect to=\"/\" />\r\n      ) : null;\r\n      summary = (\r\n        <div>\r\n          {purchasedRedirect}\r\n          <CheckoutSummary\r\n            ingredients={this.props.ings}\r\n            onCancel={this.cancelCheckout}\r\n            onContinue={this.continueCheckout}\r\n          />\r\n          <Route\r\n            path={`${this.props.match.path}/fill-data`}\r\n            component={ContactData}\r\n          />\r\n        </div>\r\n      );\r\n    }\r\n    return summary;\r\n  }\r\n}\r\n\r\nconst mapStateToProps = (state) => {\r\n  return {\r\n    ings: state.burgerBuilder.ingredients,\r\n    purchased: state.order.purchased,\r\n  };\r\n};\r\n\r\nexport default withRouter(connect(mapStateToProps)(Checkout));\r\n","import React from \"react\";\r\nimport classes from \"./Input.css\";\r\n\r\nconst Input = (props) => {\r\n  let inputElement = null;\r\n  let inputClass = [classes.InputElement];\r\n  if (props.invalid && props.touched) {\r\n    inputClass.push(classes.Invalid);\r\n  }\r\n  switch (props.elementType) {\r\n    case \"input\":\r\n      inputElement = (\r\n        <input\r\n          {...props.elementConfig}\r\n          value={props.value}\r\n          className={inputClass.join(\" \")}\r\n          onChange={props.changeHandler}\r\n        />\r\n      );\r\n      break;\r\n    case \"textarea\":\r\n      inputElement = (\r\n        <textarea\r\n          {...props.elementConfig}\r\n          value={props.value}\r\n          className={inputClass.join(\" \")}\r\n          onChange={props.changeHandler}\r\n        />\r\n      );\r\n      break;\r\n    case \"select\":\r\n      inputElement = (\r\n        <select\r\n          className={inputClass.join(\" \")}\r\n          onChange={props.changeHandler}\r\n          value={props.value}\r\n        >\r\n          {props.elementConfig.options.map((opt) => (\r\n            <option key={opt.value} value={opt.value}>\r\n              {opt.displayValue}\r\n            </option>\r\n          ))}\r\n        </select>\r\n      );\r\n      break;\r\n    default:\r\n      inputElement = (\r\n        <input\r\n          {...props.elementConfig}\r\n          value={props.value}\r\n          className={inputClass.join(\" \")}\r\n          onChange={props.changeHandler}\r\n        />\r\n      );\r\n  }\r\n  return (\r\n    <div className={classes.Input}>\r\n      <label className={classes.Label}>{props.label}</label>\r\n      {inputElement}\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default Input;\r\n","// extracted by mini-css-extract-plugin\nmodule.exports = {\"Input\":\"_2JD9xfJ5iopsdJv4stofmd\",\"Label\":\"_1BS4VDEyRn6gTvXKGhCGtY\",\"InputElement\":\"_2h6u9szBkMg06ulHHM-dBj\",\"Invalid\":\"_3PMZLK250RqXAYcKDUm6_p\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"CheckoutSummary\":\"_1yFgl7v2YT33FyRIbvSM3i\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"ContactData\":\"Ol2yTM1fo_f5CY0mRdr4s\"};"],"sourceRoot":""}